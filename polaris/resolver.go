/*
 * Copyright 2021 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package polaris

import (
	"context"
	"fmt"
	"strings"

	"github.com/cloudwego/hertz/pkg/app/client/discovery"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/polarismesh/polaris-go/api"
)

const (
	polarisDefaultNamespace = "default"
)

// Resolver is extension interface of Hertz discovery.Resolver.
type Resolver interface {
	discovery.Resolver
}

// polarisResolver is a resolver using polaris.
type polarisResolver struct {
	provider api.ProviderAPI
	consumer api.ConsumerAPI
}

// NewPolarisResolver creates a polaris based resolver.
func NewPolarisResolver(configFile ...string) (Resolver, error) {
	sdkCtx, err := GetPolarisConfig(configFile...)
	if err != nil {
		return nil, err
	}

	newInstance := &polarisResolver{
		consumer: api.NewConsumerAPIByContext(sdkCtx),
		provider: api.NewProviderAPIByContext(sdkCtx),
	}

	return newInstance, nil
}

// Target implements the Resolver interface.
func (polaris *polarisResolver) Target(ctx context.Context, target *discovery.TargetInfo) string {
	// serviceName identification is generated by namespace and serviceName to identify serviceName
	var serviceIdentification strings.Builder

	namespace, ok := target.Tags["namespace"]
	if ok {
		serviceIdentification.WriteString(namespace)
	} else {
		serviceIdentification.WriteString(polarisDefaultNamespace)
	}
	serviceIdentification.WriteString(":")
	serviceIdentification.WriteString(target.Host)

	return serviceIdentification.String()
}

// Resolve implements the Resolver interface.
func (polaris *polarisResolver) Resolve(ctx context.Context, desc string) (discovery.Result, error) {
	var eps []discovery.Instance
	namespace, serviceName := SplitDescription(desc)
	getInstances := &api.GetInstancesRequest{}
	getInstances.Namespace = namespace
	getInstances.Service = serviceName
	InstanceResp, err := polaris.consumer.GetInstances(getInstances)
	if err != nil {
		hlog.Errorf("HERTZ: Fail to getOneInstance, err is %v", err)
		return discovery.Result{}, fmt.Errorf("fail to getOneInstance, err is %v", err)
	}
	instances := InstanceResp.GetInstances()

	for _, instance := range instances {
		eps = append(eps, ChangePolarisInstanceToHertz(instance))
	}

	return discovery.Result{
		CacheKey:  desc,
		Instances: eps,
	}, nil
}

// Name implements the Resolver interface.
func (polaris *polarisResolver) Name() string {
	return "Polaris"
}
